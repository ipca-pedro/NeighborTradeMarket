{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:8000/api',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true // ESSENCIAL para sessões Laravel\n});\n\n// Interceptor para adicionar o token em todas as requisições\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const moradaService = {\n  getMoradas: async () => {\n    try {\n      const response = await api.get('/moradas');\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      console.error('Erro ao obter moradas:', error);\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message;\n    }\n  }\n};\nexport const authService = {\n  login: async (email, password) => {\n    try {\n      // Tentativa com a rota /auth/login\n      try {\n        console.log('Tentando login com /auth/login');\n        const response = await api.post('/auth/login', {\n          Email: email,\n          Password: password\n        });\n        console.log('Resposta de /auth/login:', response.data);\n        if (response.data.token) {\n          // Debug: Verificar dados do usuário antes de armazenar\n          console.log('Dados do usuário antes de armazenar:', response.data.user);\n          console.log('ID do usuário:', response.data.user.ID_User);\n\n          // Garantir que o ID do usuário seja um número\n          const userData = {\n            ...response.data.user,\n            ID_User: parseInt(response.data.user.ID_User)\n          };\n          console.log('Dados do usuário após conversão:', userData);\n          localStorage.setItem('token', response.data.token);\n          localStorage.setItem('user', JSON.stringify(userData));\n          console.log('Utilizador armazenado no localStorage:', userData);\n          console.log('TipoUserID_TipoUser:', userData.TipoUserID_TipoUser);\n        }\n        return response.data;\n      } catch (authError) {\n        console.log('Erro em /auth/login, tentando /login', authError);\n        // Se falhar, tenta com a rota /login (para compatibilidade)\n        const response = await api.post('/login', {\n          Email: email,\n          Password: password\n        });\n        console.log('Resposta de /login:', response.data);\n        if (response.data.token) {\n          localStorage.setItem('token', response.data.token);\n          localStorage.setItem('user', JSON.stringify(response.data.user));\n          console.log('Utilizador armazenado no localStorage:', response.data.user);\n          console.log('TipoUserID_TipoUser:', response.data.user.TipoUserID_TipoUser);\n        }\n        return response.data;\n      }\n    } catch (error) {\n      var _error$response2;\n      console.error('Erro ao fazer login:', error);\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message;\n    }\n  },\n  register: async userData => {\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      };\n      const response = await api.post('/auth/register', userData, config);\n      // Não armazenar token ou dados do usuário, pois o registro está pendente\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  logout: async () => {\n    try {\n      await api.post('/auth/logout');\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    } catch (error) {\n      console.error('Erro ao fazer logout:', error);\n    }\n  },\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  resetPassword: async email => {\n    try {\n      const response = await api.post('/password/email', {\n        Email: email\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message;\n    }\n  },\n  verifyResetToken: async token => {\n    try {\n      const response = await api.get(`/password/reset/${token}`);\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message;\n    }\n  },\n  resetPasswordWithToken: async (token, password, passwordConfirmation) => {\n    try {\n      const response = await api.post('/password/reset', {\n        token,\n        Password: password,\n        Password_confirmation: passwordConfirmation\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message;\n    }\n  },\n  getUserProfile: async () => {\n    try {\n      const response = await api.get('/perfil');\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message;\n    }\n  },\n  updateUserProfile: async profileData => {\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      };\n      const response = await api.post('/perfil', profileData, config);\n      return response.data;\n    } catch (error) {\n      var _error$response7;\n      throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message;\n    }\n  }\n};\nexport const adminService = {\n  // Obter utilizadores pendentes\n  getPendingUsers: async () => {\n    try {\n      const response = await api.get('/admin/users/pending');\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      console.error('Erro ao obter utilizadores pendentes:', error);\n      throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error.message;\n    }\n  },\n  // Obter todos os utilizadores\n  getAllUsers: async () => {\n    try {\n      const response = await api.get('/admin/users');\n      return response.data;\n    } catch (error) {\n      var _error$response9;\n      console.error('Erro ao obter todos os utilizadores:', error);\n      throw ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || error.message;\n    }\n  },\n  // Atualizar status de um utilizador\n  updateUserStatus: async (userId, statusId) => {\n    try {\n      const response = await api.put(`/admin/users/${userId}/status`, {\n        status: statusId\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response10;\n      console.error('Erro ao atualizar status do utilizador:', error);\n      throw ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.data) || error.message;\n    }\n  },\n  // Aprovar um utilizador\n  approveUser: async userId => {\n    try {\n      const response = await api.post(`/admin/users/${userId}/approve`);\n      return response.data;\n    } catch (error) {\n      var _error$response11;\n      console.error('Erro ao aprovar utilizador:', error);\n      throw ((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.data) || error.message;\n    }\n  },\n  // Rejeitar um utilizador\n  rejectUser: async (userId, reason) => {\n    try {\n      const response = await api.post(`/admin/users/${userId}/reject`, {\n        motivo: reason\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response12;\n      console.error('Erro ao rejeitar utilizador:', error);\n      throw ((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : _error$response12.data) || error.message;\n    }\n  },\n  // Obter anúncios pendentes\n  getAnunciosPendentes: async () => {\n    try {\n      const response = await api.get('/admin/anuncios/pendentes');\n      return response.data;\n    } catch (error) {\n      var _error$response13;\n      console.error('Erro ao obter anúncios pendentes:', error);\n      throw ((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : _error$response13.data) || error.message;\n    }\n  },\n  // Aprovar um anúncio\n  aprovarAnuncio: async anuncioId => {\n    try {\n      console.log('Tentando aprovar anúncio:', anuncioId);\n      const response = await api.post(`/admin/anuncios/${anuncioId}/aprovar`);\n      console.log('Resposta da aprovação:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response14, _error$response15, _error$response16;\n      console.error(`Erro detalhado ao aprovar anúncio ${anuncioId}:`, {\n        message: error.message,\n        response: (_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : _error$response14.data,\n        status: (_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : _error$response15.status\n      });\n      throw ((_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : _error$response16.data) || error.message;\n    }\n  },\n  // Rejeitar um anúncio\n  rejeitarAnuncio: async (anuncioId, comentario) => {\n    try {\n      const response = await api.post(`/admin/anuncios/${anuncioId}/rejeitar`, {\n        comentario\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response17;\n      console.error(`Erro ao rejeitar anúncio ${anuncioId}:`, error);\n      throw ((_error$response17 = error.response) === null || _error$response17 === void 0 ? void 0 : _error$response17.data) || error.message;\n    }\n  },\n  // --- Anuncio Admin --- \n  getAllAnunciosAdmin: async (filters = {}) => {\n    try {\n      // Pass filters as URL parameters\n      const response = await api.get('/admin/anuncios', {\n        params: filters\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response18;\n      console.error('Erro ao obter todos os anúncios para admin:', error);\n      throw ((_error$response18 = error.response) === null || _error$response18 === void 0 ? void 0 : _error$response18.data) || error.message;\n    }\n  },\n  updateAnuncioStatusAdmin: async (anuncioId, statusId) => {\n    try {\n      const response = await api.put(`/admin/anuncios/${anuncioId}/status`, {\n        status: statusId\n      });\n      return response.data; // Contains message and updated anuncio\n    } catch (error) {\n      var _error$response19;\n      console.error(`Erro ao atualizar estado do anúncio ${anuncioId}:`, error);\n      throw ((_error$response19 = error.response) === null || _error$response19 === void 0 ? void 0 : _error$response19.data) || error.message;\n    }\n  }\n};\nexport const anuncioService = {\n  // Obter todos os anúncios\n  getAnuncios: async (filtros = {}) => {\n    try {\n      var _response$data;\n      console.log('Buscando anúncios com filtros:', filtros);\n      // Este endpoint deve ser uma rota pública que não requer autenticação\n      const response = await api.get('/anuncios', {\n        params: filtros\n      });\n      console.log('Anúncios recebidos:', ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.length) || 0);\n      return response.data;\n    } catch (error) {\n      var _error$response20;\n      console.error('Erro ao obter anúncios:', error);\n      if (((_error$response20 = error.response) === null || _error$response20 === void 0 ? void 0 : _error$response20.status) === 401) {\n        console.log('Erro de autenticação, tentando via endpoint público');\n        // Tentar buscar via endpoint público alternativo\n        try {\n          const publicResponse = await api.get('/anuncios/publicos', {\n            params: filtros\n          });\n          return publicResponse.data;\n        } catch (fallbackError) {\n          console.error('Erro no fallback público:', fallbackError);\n          return []; // Retornar array vazio em vez de lançar erro\n        }\n      }\n      return []; // Retornar array vazio para não quebrar a UI\n    }\n  },\n  // Obter um anúncio específico\n  getAnuncio: async id => {\n    try {\n      const response = await api.get(`/anuncios/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response21;\n      console.error(`Erro ao obter anúncio ${id}:`, error);\n      throw ((_error$response21 = error.response) === null || _error$response21 === void 0 ? void 0 : _error$response21.data) || error.message;\n    }\n  },\n  // Obter anúncios do utilizador atual\n  getMeusAnuncios: async () => {\n    try {\n      // Tentar obter o ID do utilizador do localStorage\n      const userData = localStorage.getItem('user');\n      let userId = null;\n      if (userData) {\n        try {\n          const user = JSON.parse(userData);\n          userId = user.id || user.ID_Utilizador;\n          console.log('ID do utilizador obtido do localStorage:', userId);\n        } catch (e) {\n          console.error('Erro ao analisar dados do utilizador:', e);\n        }\n      }\n      let response;\n\n      // Se temos o ID do utilizador, usar a rota alternativa\n      if (userId) {\n        response = await api.get(`/user/${userId}/anuncios`);\n        console.log('Usando rota alternativa para obter anúncios');\n      } else {\n        // Caso contrário, tentar a rota original\n        response = await api.get('/meus-anuncios');\n        console.log('Usando rota original para obter anúncios');\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response22;\n      console.error('Erro ao obter meus anúncios:', error);\n      // Se for erro de autenticação, retornar array vazio em vez de lançar erro\n      if (error.response && (error.response.status === 401 || error.response.status === 500)) {\n        console.warn('Erro de autenticação ou servidor, retornando array vazio');\n        return [];\n      }\n      throw ((_error$response22 = error.response) === null || _error$response22 === void 0 ? void 0 : _error$response22.data) || error.message;\n    }\n  },\n  // Criar um novo anúncio\n  criarAnuncio: async anuncioData => {\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      };\n      const response = await api.post('/anuncios', anuncioData, config);\n      return response.data;\n    } catch (error) {\n      var _error$response23;\n      console.error('Erro ao criar anúncio:', error);\n      throw ((_error$response23 = error.response) === null || _error$response23 === void 0 ? void 0 : _error$response23.data) || error.message;\n    }\n  },\n  // Atualizar um anúncio existente\n  atualizarAnuncio: async (id, anuncioData) => {\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      };\n      const response = await api.put(`/anuncios/${id}`, anuncioData, config);\n      return response.data;\n    } catch (error) {\n      var _error$response24;\n      console.error(`Erro ao atualizar anúncio ${id}:`, error);\n      throw ((_error$response24 = error.response) === null || _error$response24 === void 0 ? void 0 : _error$response24.data) || error.message;\n    }\n  },\n  // Excluir um anúncio\n  excluirAnuncio: async id => {\n    try {\n      const response = await api.delete(`/anuncios/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response25;\n      console.error(`Erro ao excluir anúncio ${id}:`, error);\n      throw ((_error$response25 = error.response) === null || _error$response25 === void 0 ? void 0 : _error$response25.data) || error.message;\n    }\n  },\n  // Obter anúncios do utilizador logado\n  getMeusAnuncios: async () => {\n    try {\n      const response = await api.get('/meus-anuncios');\n      return response.data;\n    } catch (error) {\n      var _error$response26;\n      console.error('Erro ao obter meus anúncios:', error);\n      throw ((_error$response26 = error.response) === null || _error$response26 === void 0 ? void 0 : _error$response26.data) || error.message;\n    }\n  },\n  // Marcar anúncio como vendido\n  marcarComoVendido: async id => {\n    try {\n      const response = await api.post(`/anuncios/${id}/sold`);\n      return response.data;\n    } catch (error) {\n      var _error$response27;\n      console.error(`Erro ao marcar anúncio ${id} como vendido:`, error);\n      throw ((_error$response27 = error.response) === null || _error$response27 === void 0 ? void 0 : _error$response27.data) || error.message;\n    }\n  },\n  // Obter categorias disponíveis\n  getCategorias: async () => {\n    try {\n      const response = await api.get('/categorias');\n      return response.data;\n    } catch (error) {\n      var _error$response28;\n      console.error('Erro ao obter categorias:', error);\n      throw ((_error$response28 = error.response) === null || _error$response28 === void 0 ? void 0 : _error$response28.data) || error.message;\n    }\n  },\n  // Alias para compatibilidade com o backend\n  getCategories: async () => {\n    return anuncioService.getCategorias();\n  },\n  // Obter anúncios por categoria\n  getAnunciosPorCategoria: async categoriaId => {\n    try {\n      console.log('Buscando anúncios da categoria:', categoriaId);\n      const response = await api.get(`/anuncios/categoria/${categoriaId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Erro ao buscar anúncios da categoria ${categoriaId}:`, error);\n      return []; // Retornar array vazio para não quebrar a UI\n    }\n  },\n  // Obter tipos de item disponíveis\n  getTiposItem: async () => {\n    try {\n      const response = await api.get('/tipos-item');\n      return response.data;\n    } catch (error) {\n      var _error$response29;\n      console.error('Erro ao obter tipos de item:', error);\n      throw ((_error$response29 = error.response) === null || _error$response29 === void 0 ? void 0 : _error$response29.data) || error.message;\n    }\n  },\n  // Alias para compatibilidade com o backend\n  getItemTypes: async () => {\n    return anuncioService.getTiposItem();\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","moradaService","getMoradas","response","get","data","error","_error$response","console","message","authService","login","email","password","log","post","Email","Password","user","ID_User","userData","parseInt","setItem","JSON","stringify","TipoUserID_TipoUser","authError","_error$response2","register","logout","removeItem","getCurrentUser","parse","resetPassword","_error$response3","verifyResetToken","_error$response4","resetPasswordWithToken","passwordConfirmation","Password_confirmation","_error$response5","getUserProfile","_error$response6","updateUserProfile","profileData","_error$response7","adminService","getPendingUsers","_error$response8","getAllUsers","_error$response9","updateUserStatus","userId","statusId","put","status","_error$response10","approveUser","_error$response11","rejectUser","reason","motivo","_error$response12","getAnunciosPendentes","_error$response13","aprovarAnuncio","anuncioId","_error$response14","_error$response15","_error$response16","rejeitarAnuncio","comentario","_error$response17","getAllAnunciosAdmin","filters","params","_error$response18","updateAnuncioStatusAdmin","_error$response19","anuncioService","getAnuncios","filtros","_response$data","length","_error$response20","publicResponse","fallbackError","getAnuncio","id","_error$response21","getMeusAnuncios","ID_Utilizador","e","_error$response22","warn","criarAnuncio","anuncioData","_error$response23","atualizarAnuncio","_error$response24","excluirAnuncio","delete","_error$response25","_error$response26","marcarComoVendido","_error$response27","getCategorias","_error$response28","getCategories","getAnunciosPorCategoria","categoriaId","getTiposItem","_error$response29","getItemTypes"],"sources":["C:/xampp/htdocs/NeighborTradeMarket/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'http://127.0.0.1:8000/api',\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    },\n    withCredentials: true // ESSENCIAL para sessões Laravel\n});\n\n// Interceptor para adicionar o token em todas as requisições\napi.interceptors.request.use((config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n});\n\nexport const moradaService = {\n    getMoradas: async () => {\n        try {\n            const response = await api.get('/moradas');\n            return response.data;\n        } catch (error) {\n            console.error('Erro ao obter moradas:', error);\n            throw error.response?.data || error.message;\n        }\n    }\n};\n\nexport const authService = {\n    login: async (email, password) => {\n        try {\n            // Tentativa com a rota /auth/login\n            try {\n                console.log('Tentando login com /auth/login');\n                const response = await api.post('/auth/login', { Email: email, Password: password });\n                console.log('Resposta de /auth/login:', response.data);\n                if (response.data.token) {\n                    // Debug: Verificar dados do usuário antes de armazenar\n                    console.log('Dados do usuário antes de armazenar:', response.data.user);\n                    console.log('ID do usuário:', response.data.user.ID_User);\n                    \n                    // Garantir que o ID do usuário seja um número\n                    const userData = {\n                        ...response.data.user,\n                        ID_User: parseInt(response.data.user.ID_User)\n                    };\n                    \n                    console.log('Dados do usuário após conversão:', userData);\n                    \n                    localStorage.setItem('token', response.data.token);\n                    localStorage.setItem('user', JSON.stringify(userData));\n                    console.log('Utilizador armazenado no localStorage:', userData);\n                    console.log('TipoUserID_TipoUser:', userData.TipoUserID_TipoUser);\n                }\n                return response.data;\n            } catch (authError) {\n                console.log('Erro em /auth/login, tentando /login', authError);\n                // Se falhar, tenta com a rota /login (para compatibilidade)\n                const response = await api.post('/login', { Email: email, Password: password });\n                console.log('Resposta de /login:', response.data);\n                if (response.data.token) {\n                    localStorage.setItem('token', response.data.token);\n                    localStorage.setItem('user', JSON.stringify(response.data.user));\n                    console.log('Utilizador armazenado no localStorage:', response.data.user);\n                    console.log('TipoUserID_TipoUser:', response.data.user.TipoUserID_TipoUser);\n                }\n                return response.data;\n            }\n        } catch (error) {\n            console.error('Erro ao fazer login:', error);\n            throw error.response?.data || error.message;\n        }\n    },\n\n    register: async (userData) => {\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            };\n            const response = await api.post('/auth/register', userData, config);\n            // Não armazenar token ou dados do usuário, pois o registro está pendente\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    },\n\n    logout: async () => {\n        try {\n            await api.post('/auth/logout');\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n        } catch (error) {\n            console.error('Erro ao fazer logout:', error);\n        }\n    },\n\n    getCurrentUser: () => {\n        const user = localStorage.getItem('user');\n        return user ? JSON.parse(user) : null;\n    },\n    \n    resetPassword: async (email) => {\n        try {\n            const response = await api.post('/password/email', { Email: email });\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    verifyResetToken: async (token) => {\n        try {\n            const response = await api.get(`/password/reset/${token}`);\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    resetPasswordWithToken: async (token, password, passwordConfirmation) => {\n        try {\n            const response = await api.post('/password/reset', { \n                token, \n                Password: password, \n                Password_confirmation: passwordConfirmation \n            });\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    getUserProfile: async () => {\n        try {\n            const response = await api.get('/perfil');\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    updateUserProfile: async (profileData) => {\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            };\n            const response = await api.post('/perfil', profileData, config);\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || error.message;\n        }\n    }\n};\n\nexport const adminService = {\n    // Obter utilizadores pendentes\n    getPendingUsers: async () => {\n        try {\n            const response = await api.get('/admin/users/pending');\n            return response.data;\n        } catch (error) {\n            console.error('Erro ao obter utilizadores pendentes:', error);\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Obter todos os utilizadores\n    getAllUsers: async () => {\n        try {\n            const response = await api.get('/admin/users');\n            return response.data;\n        } catch (error) {\n            console.error('Erro ao obter todos os utilizadores:', error);\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Atualizar status de um utilizador\n    updateUserStatus: async (userId, statusId) => {\n        try {\n            const response = await api.put(`/admin/users/${userId}/status`, { status: statusId });\n            return response.data;\n        } catch (error) {\n            console.error('Erro ao atualizar status do utilizador:', error);\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Aprovar um utilizador\n    approveUser: async (userId) => {\n        try {\n            const response = await api.post(`/admin/users/${userId}/approve`);\n            return response.data;\n        } catch (error) {\n            console.error('Erro ao aprovar utilizador:', error);\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Rejeitar um utilizador\n    rejectUser: async (userId, reason) => {\n        try {\n            const response = await api.post(`/admin/users/${userId}/reject`, { motivo: reason });\n            return response.data;\n        } catch (error) {\n            console.error('Erro ao rejeitar utilizador:', error);\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Obter anúncios pendentes\n    getAnunciosPendentes: async () => {\n        try {\n            const response = await api.get('/admin/anuncios/pendentes');\n            return response.data;\n        } catch (error) {\n            console.error('Erro ao obter anúncios pendentes:', error);\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Aprovar um anúncio\n    aprovarAnuncio: async (anuncioId) => {\n        try {\n            console.log('Tentando aprovar anúncio:', anuncioId);\n            const response = await api.post(`/admin/anuncios/${anuncioId}/aprovar`);\n            console.log('Resposta da aprovação:', response.data);\n            return response.data;\n        } catch (error) {\n            console.error(`Erro detalhado ao aprovar anúncio ${anuncioId}:`, {\n                message: error.message,\n                response: error.response?.data,\n                status: error.response?.status\n            });\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Rejeitar um anúncio\n    rejeitarAnuncio: async (anuncioId, comentario) => {\n        try {\n            const response = await api.post(`/admin/anuncios/${anuncioId}/rejeitar`, { comentario });\n            return response.data;\n        } catch (error) {\n            console.error(`Erro ao rejeitar anúncio ${anuncioId}:`, error);\n            throw error.response?.data || error.message;\n        }\n    },\n\n    // --- Anuncio Admin --- \n    getAllAnunciosAdmin: async (filters = {}) => {\n        try {\n            // Pass filters as URL parameters\n            const response = await api.get('/admin/anuncios', { params: filters });\n            return response.data;\n        } catch (error) {\n            console.error('Erro ao obter todos os anúncios para admin:', error);\n            throw error.response?.data || error.message;\n        }\n    },\n\n    updateAnuncioStatusAdmin: async (anuncioId, statusId) => {\n        try {\n            const response = await api.put(`/admin/anuncios/${anuncioId}/status`, { status: statusId });\n            return response.data; // Contains message and updated anuncio\n        } catch (error) {\n             console.error(`Erro ao atualizar estado do anúncio ${anuncioId}:`, error);\n             throw error.response?.data || error.message;\n        }\n    }\n};\n\nexport const anuncioService = {\n    // Obter todos os anúncios\n    getAnuncios: async (filtros = {}) => {\n        try {\n            console.log('Buscando anúncios com filtros:', filtros);\n            // Este endpoint deve ser uma rota pública que não requer autenticação\n            const response = await api.get('/anuncios', { params: filtros });\n            console.log('Anúncios recebidos:', response.data?.length || 0);\n            return response.data;\n        } catch (error) {\n            console.error('Erro ao obter anúncios:', error);\n            if (error.response?.status === 401) {\n                console.log('Erro de autenticação, tentando via endpoint público');\n                // Tentar buscar via endpoint público alternativo\n                try {\n                    const publicResponse = await api.get('/anuncios/publicos', { params: filtros });\n                    return publicResponse.data;\n                } catch (fallbackError) {\n                    console.error('Erro no fallback público:', fallbackError);\n                    return []; // Retornar array vazio em vez de lançar erro\n                }\n            }\n            return []; // Retornar array vazio para não quebrar a UI\n        }\n    },\n    \n    // Obter um anúncio específico\n    getAnuncio: async (id) => {\n        try {\n            const response = await api.get(`/anuncios/${id}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Erro ao obter anúncio ${id}:`, error);\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Obter anúncios do utilizador atual\n    getMeusAnuncios: async () => {\n        try {\n            // Tentar obter o ID do utilizador do localStorage\n            const userData = localStorage.getItem('user');\n            let userId = null;\n            \n            if (userData) {\n                try {\n                    const user = JSON.parse(userData);\n                    userId = user.id || user.ID_Utilizador;\n                    console.log('ID do utilizador obtido do localStorage:', userId);\n                } catch (e) {\n                    console.error('Erro ao analisar dados do utilizador:', e);\n                }\n            }\n            \n            let response;\n            \n            // Se temos o ID do utilizador, usar a rota alternativa\n            if (userId) {\n                response = await api.get(`/user/${userId}/anuncios`);\n                console.log('Usando rota alternativa para obter anúncios');\n            } else {\n                // Caso contrário, tentar a rota original\n                response = await api.get('/meus-anuncios');\n                console.log('Usando rota original para obter anúncios');\n            }\n            \n            return response.data;\n        } catch (error) {\n            console.error('Erro ao obter meus anúncios:', error);\n            // Se for erro de autenticação, retornar array vazio em vez de lançar erro\n            if (error.response && (error.response.status === 401 || error.response.status === 500)) {\n                console.warn('Erro de autenticação ou servidor, retornando array vazio');\n                return [];\n            }\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Criar um novo anúncio\n    criarAnuncio: async (anuncioData) => {\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            };\n            const response = await api.post('/anuncios', anuncioData, config);\n            return response.data;\n        } catch (error) {\n            console.error('Erro ao criar anúncio:', error);\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Atualizar um anúncio existente\n    atualizarAnuncio: async (id, anuncioData) => {\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            };\n            const response = await api.put(`/anuncios/${id}`, anuncioData, config);\n            return response.data;\n        } catch (error) {\n            console.error(`Erro ao atualizar anúncio ${id}:`, error);\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Excluir um anúncio\n    excluirAnuncio: async (id) => {\n        try {\n            const response = await api.delete(`/anuncios/${id}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Erro ao excluir anúncio ${id}:`, error);\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Obter anúncios do utilizador logado\n    getMeusAnuncios: async () => {\n        try {\n            const response = await api.get('/meus-anuncios');\n            return response.data;\n        } catch (error) {\n            console.error('Erro ao obter meus anúncios:', error);\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Marcar anúncio como vendido\n    marcarComoVendido: async (id) => {\n        try {\n            const response = await api.post(`/anuncios/${id}/sold`);\n            return response.data;\n        } catch (error) {\n            console.error(`Erro ao marcar anúncio ${id} como vendido:`, error);\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Obter categorias disponíveis\n    getCategorias: async () => {\n        try {\n            const response = await api.get('/categorias');\n            return response.data;\n        } catch (error) {\n            console.error('Erro ao obter categorias:', error);\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Alias para compatibilidade com o backend\n    getCategories: async () => {\n        return anuncioService.getCategorias();\n    },\n    \n    // Obter anúncios por categoria\n    getAnunciosPorCategoria: async (categoriaId) => {\n        try {\n            console.log('Buscando anúncios da categoria:', categoriaId);\n            const response = await api.get(`/anuncios/categoria/${categoriaId}`);\n            return response.data;\n        } catch (error) {\n            console.error(`Erro ao buscar anúncios da categoria ${categoriaId}:`, error);\n            return []; // Retornar array vazio para não quebrar a UI\n        }\n    },\n    \n    // Obter tipos de item disponíveis\n    getTiposItem: async () => {\n        try {\n            const response = await api.get('/tipos-item');\n            return response.data;\n        } catch (error) {\n            console.error('Erro ao obter tipos de item:', error);\n            throw error.response?.data || error.message;\n        }\n    },\n    \n    // Alias para compatibilidade com o backend\n    getItemTypes: async () => {\n        return anuncioService.getTiposItem();\n    }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}